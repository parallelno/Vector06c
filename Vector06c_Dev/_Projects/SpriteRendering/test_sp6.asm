;
; вывод спрайта.
; тест скорости.
;                                           08.2020
;--------------------------------------------------
; счетчики и стеки
#DEFINE	IntCount	$9ff8
#DEFINE	hlCount		$9ff4
#DEFINE	a_sp		$9ff0
#DEFINE	im_stek		$9f80
;
; значение таймера в секундах Timer	10 = 10сек
#DEFINE	Timer		10
#DEFINE	TimerCount	$9f10
#DEFINE	StopFlag	$9f18
;
#DEFINE	a_test_spr	$8ee0	
;
; адреса результата на экране
#DEFINE	Jerri_a		$80d0	
#DEFINE	Jerri2_a	$80b0
#DEFINE	Serg_a		$8080
#DEFINE	Serg2_a		$8060
#DEFINE	metamorpho_a	$8030
#DEFINE	metamorpho2_a	$8010
;
	.org	$0100
;
; инит при запуске
StartZ:	di
	xra	A
	out	10H		; откл. КвазиДиск
;
	MVI	A,0C3H
	STA	0000H		; для перезапуска
	STA	0038H		; для прерывания
	LXI	H,StartZ	; для перезапуска
	SHLD	0001H
	LXI	H,StInt		; для прерывания
	SHLD	0039H
;
;--------------------------------
; Очистка ОЗУ экрана C000...DFFF при B=F800
;
	LXI	SP,0000H	; установить верхушку стека - верх экранного ОЗУ
	XRA	A
	LXI     B,0F000H	; счетчик количества "сохранений HL в стек"
	LXI	H,0000H
CLR_S1:	PUSH	H		; чистка ОЗУ
	PUSH	H		; чистка ОЗУ
	PUSH	H		; чистка ОЗУ
	PUSH	H		; чистка ОЗУ
	INX	B		; можно убрать если не хватает ресурсов
	CMP	B	 	; или добавить, для скорости очистки
	JNZ	CLR_S1
;--------------------------------
;
	lxi	sp,a_sp
;
	ei		; разрешить прерывания
	hlt		 ; ждём прерывания
	call	SColor	; программирование палитры
;
;--------------------------------
; тестирование алгоритмов вывода спрайта на экран
;
	call	InitTimer
	call	Jerri
;
	call	InitTimer
	call	Jerri2	; развернут и расчитаны битпланы
;
	call	InitTimer
	call	Serg
;
	call	InitTimer
	call	Serg2	; расчитаны битпланы
;
	call	InitTimer
	call	metamorpho	; без использования стека
;
	call	InitTimer
	call	metamorpho2	; без использования стека и с обычными прерываниями
;
;------------------------------------------------------
	mvi	a,4	; выбор цвета из палитры
	out	2	; изменить цвет бордюра
;------------------------------------------------------
next:	jmp	next
;
;========================================================
InitTimer:
	di
	lxi	h,Timer*50	; секунды * кол-во прерываний в секунду
	shld	TimerCount	; сохраняем значение таймара
	mvi	a,$ff		 ; значение флага для разрешения вывода спрайтов
	sta	StopFlag	 ; сохраняем флаг
	lxi	h,0
	shld	hlCount
	ei
	hlt
	ret
;
;========================================================
;=================================
Jerri:	lhld	hlCount
Jerri_c:
	lxi	d,a_test_spr	; адрес спрайта на экране
	lxi	b,tab_spr0	; адрес спрайта
	push	h		 ; сохранить счетчик
;
	call	drop24		; вывод спрайта
;
	pop	h	 ; восстановить счетчик
	inx	h	; увеличение счетчика выводов спрайта на экран
;
	lda	StopFlag	 ; читаем флаг остановки
	ora	a	; проверка флага
	jnz	Jerri_c
	shld	hlCount
	lxi	d,Jerri_a	; адрес спрайта на экране
	call	vyv_rez
	ret
;
;--------------------------------
Jerri2:	lhld	hlCount
Jerri2_c:
	lxi	d,a_test_spr	; адрес спрайта на экране
	lxi	b,tab_spr0	; адрес спрайта
	push	h
;
	call	drop24_2		; вывод спрайта
;
	pop	h
	inx	h	; увеличение счетчика выводов спрайта на экран
;
	lda	StopFlag	 ; читаем флаг остановки
	ora	a	; проверка флага
	jnz	Jerri2_c
	shld	hlCount
	lxi	d,Jerri2_a	; адрес спрайта на экране
	call	vyv_rez
	ret
;
;=================================
Serg:	lhld	hlCount
Serg_c:
	lxi	d,a_test_spr	; адрес спрайта на экране
	lxi	b,tab_spr0	; адрес спрайта
	push	h
;
	call	spr_start	; вывод спрайта
;
	pop	h
	inx	h	; увеличение счетчика выводов спрайта на экран
;
	lda	StopFlag	 ; читаем флаг остановки
	ora	a	; проверка флага
	jnz	Serg_c
	shld	hlCount
	lxi	d,Serg_a	; адрес спрайта на экране
	call	vyv_rez
	ret
;
;--------------------------------
Serg2:	lhld	hlCount
Serg2_c:
	lxi	d,a_test_spr	; адрес спрайта на экране
	lxi	b,tab_spr0	; адрес спрайта
	push	h
;
	call	spr2start	; вывод спрайта
;
	pop	h
	inx	h	; увеличение счетчика выводов спрайта на экран
;
	lda	StopFlag	 ; читаем флаг остановки
	ora	a	; проверка флага
	jnz	Serg2_c
	shld	hlCount
	lxi	d,Serg2_a	; адрес спрайта на экране
	call	vyv_rez
	ret
;
;=================================
metamorpho:
	lhld	hlCount
metamorpho_c:
	lxi	d,a_test_spr+22	; адрес спрайта на экране
	lxi	b,tab_spr0	; адрес спрайта
	push	h
;
	call	SpriteC3qa	; вывод спрайта
;
	pop	h
	inx	h	; увеличение счетчика выводов спрайта на экран
;
	lda	StopFlag	 ; читаем флаг остановки
	ora	a	; проверка флага
	jnz	metamorpho_c
	shld	hlCount
	lxi	d,metamorpho_a	; адрес спрайта на экране
	call	vyv_rez
	ret
;--------------------------------------------------------
; с обычными прерываниями
metamorpho2:
; замена прерываний на обычные
	di
	LXI	H,StIntSt		; для стандартного прерывания
	SHLD	0039H
	ei
;
	lhld	hlCount
metamorpho2_c:
	lxi	d,a_test_spr+22	; адрес спрайта на экране
	lxi	b,tab_spr0	; адрес спрайта
	push	h
;
	call	SpriteC3qa	; вывод спрайта
;
	pop	h
	inx	h	; увеличение счетчика выводов спрайта на экран
;
	lda	StopFlag	 ; читаем флаг остановки
	ora	a	; проверка флага
	jnz	metamorpho2_c
	shld	hlCount
	lxi	d,metamorpho2_a	; адрес спрайта на экране
	call	vyv_rez
;восстановление прерываний с защитой стека
	di
	LXI	H,StInt		; для прерывания
	SHLD	0039H
	ei
;
	ret
;
;=================================
; вывод результата
vyv_rez:
	lhld	hlCount	; значение счетчика
	mov	a,h
	rrc
	rrc
	rrc
	rrc
	call	adr_tab	; вычисление адреса спрайта
	push	d	; сохранить адрес на экране
	call	drop24
	pop	d	; восстановить адрес на экране
	inr	d
	inr	d
	inr	d	; сдвиг к адресу для след. спрайта
;
	lhld	hlCount	; значение счетчика
	mov	a,h
	call	adr_tab	; вычисление адреса спрайта
	push	d	; сохранить адрес на экране
	call	drop24
	pop	d	; восстановить адрес на экране
	inr	d
	inr	d
	inr	d	; сдвиг к адресу для след. спрайта
;
	lhld	hlCount	; значение счетчика
	mov	a,l
	rrc
	rrc
	rrc
	rrc
	call	adr_tab	; вычисление адреса спрайта
	push	d	; сохранить адрес на экране
	call	drop24
	pop	d	; восстановить адрес на экране
	inr	d
	inr	d
	inr	d	; сдвиг к адресу для след. спрайта
;
	lhld	hlCount	; значение счетчика
	mov	a,l
	call	adr_tab
	call	adr_tab	; вычисление адреса спрайта
	push	d	; сохранить адрес на экране
	call	drop24
	pop	d	; восстановить адрес на экране - освободить стек
;
	ret
;======================================
;---------------------------------------------
;===================================================
; получение из таблицы адреса спрайта по его номеру
; вход a - номер спрайта
; выход bc - адрес спрайта
adr_tab:
	ani	$0f
	add	a
	mov	c,a
	mvi	b,0
	lxi	h,tab_spr
	dad	b
	mov	c,m
	inx	h
	mov	b,m
	ret
;
;=====================================
; палитра цветов
MColor:	.DB	$07,$2D,$2D,$2D,$2D,$2D,$2D,$f8,$2D,$2D,$20,$1f,$c0,$38,$07,$10
;
;*--- программирование палитры ---
SColor:	PUSH	PSW
	PUSH	B
	PUSH	H
	LXI	H,MColor	; адрес палитры цветов
	MVI	B,0FH
SCol1:	MOV	A,B
	OUT	02
	MOV	A,M
	OUT	0CH		;
	INR	C
	OUT	0CH		;
	INX	H
	OUT	0CH		;
	DCR	C
	DCR	B
	OUT	0CH		;
	JP	SCol1
	MVI	A,88H
	OUT	00
	XRA	A
	OUT	02	; вывод цвета бордюра
	DCR	A
	OUT	03
	POP	H
	POP	B
	POP	PSW
	RET
;
;====================================================================
;*----------- прерывание --------------
; обновляет счетчик количества прерываний для работы Таймера
;
StInt:
	xthl		; обмен hl <-> ((sp))
	shld	im_ret+1	; сохраним адрес возврата из прерывания
	pop	h
	shld	im_hl+1		; сохраним значение HL при выхове прерывания
	push	psw
	lxi	h,2	;\ вычисляем указатель стека
	dad	sp	;/
	shld	im_sp+1	; сохраним указатель стека
	pop	psw
	push	b	;восстановим данные испорченные стеком
	
	lxi	sp,im_stek	; временный указатель стека для прерываний
	push	PSW
	push	b
	push	d
;
; мои задачи в прерываниях
;===========
	lhld	IntCount	; метка для флагов состояния программы
	inx	h
	shld	IntCount	; метка для флагов состояния программы
;
	lhld	TimerCount	; читаем значение таймера
	dcx	h	 	; уменьшаем
	shld	TimerCount	; сохраняем значение таймера
	mov	a,h
	ora	l	 ; проверяем значение таймера на 00
	jnz	StIntHl	; если не 0
;
	sta	StopFlag	; запись 00 в фдаг остановки вывода спрайтов
;
StIntHl:
;===========
;=== мои задачи закончились====================
; выход из прерываний
	pop	d
	pop	b
	pop	psw
im_hl:	lxi	h,$2121
im_sp:	lxi	sp,$3131
	ei
im_ret:	jmp	$c3c3
;
;--------------------------------------------------
;*----------- стандартные прерывания --------------
; обновляет счетчик количества прерываний для работы Таймера
;
StIntSt:
	push	PSW
	push	b
	push	d
	push	h
;
; мои задачи в прерываниях
;===========
	lhld	IntCount	; метка для флагов состояния программы
	inx	h
	shld	IntCount	; метка для флагов состояния программы
;
	lhld	TimerCount	; читаем значение таймера
	dcx	h	 	; уменьшаем
	shld	TimerCount	; сохраняем значение таймера
	mov	a,h
	ora	l	 ; проверяем значение таймера на 00
	jnz	StIntSt1	; если не 0
;
	sta	StopFlag	; запись 00 в фдаг остановки вывода спрайтов
;
StIntSt1:
;=== мои задачи закончились====================
; выход из прерываний
	pop	h
	pop	d
	pop	b
	pop	psw
	ei
	ret
;
;========================================================
;вывод спрайта в системе битпланов Вектор 06
;ширина спрайта -24
;на входе
;bc адрес спрайта
;de aдрес на экране 
;E-Y D-X 

drop24:	mvi	a,12
;
	lxi	h,0
	dad	sp
	shld	sprite_sp0+1
;
	mov	h,b
	mov	l,c
	mov	c,m
	inx	h
	mov	b,m
	inx	h
	sphl
;задаем Y в L
	mov	l,e
;задаем высоту спрайта в E
	mov	e,a
;задаем X в A
	mov	a,d
;переход между битпланами
	mvi	d,$20	
drop240:
	mov	h,a
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	add	d

	mov	h,a
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	add	d

	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;возвращаемся на первый план	
	sui	$40
	mov	h,a
;переходим на следующую строку
	inr	l	

;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	add	d

	mov	h,a
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	add	d

	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	pop	b

;возвращаемся на первый план	
	sui	$40
	mov	h,a
;переходим на следующую строку
	inr	l	
;проверяем на завершение цикла 
	dcr	e
	jnz	drop240	
sprite_sp0:
	lxi	sp,$3131
;
	ret
;
;========================================
; выводим по 4 строки спрайта
;на входе
;bc адрес спрайта
;de aдрес на экране 
;E-Y D-X 
;=================================================================
spr_start:
	lxi	h,0
	dad	sp	; в hl - указатель стека
	shld	sp_rd+1	; сохраним указатель стека для восстановления
	mov	h,b
	mov	l,c
	sphl	; hl -> sp  - указатель стека на начало указанного спрайта
	xchg		; обмен hl<->de
	shld	spr_ekran	; адрес спрайта на экране
;
; вывод спрайта
	mvi	e,6	; количество повторов вывода 4 строк спрайта
	lhld	spr_ekran	; получение адреса спрайта на экране
	mvi	d,$20		 ; смещение на след. экранную плоскость
spr_c6:	mov	a,h	; сохранить адрес колонки на первой экр. плоскости
;
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
;
	add	d	; след. экранная плоскость
	mov	h,a
;
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
;
	add	d	; след. экранная плоскость
	mov	h,a
;
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
;
	inr	l	 ; строка вверх на экране - правая колонка, 3-я строка
	sui	$40
	mov	h,a	; первая экранная плоскость
;
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
;
	add	d	; след. экранная плоскость
	mov	h,a
;
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
;
	add	d	; след. экранная плоскость
	mov	h,a
;
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	dcr	l	 ; строка вниз на экране
	mov	m,b	; вывод байта на экран
	inr	h	 ; следующая колонка
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
;
	inr	l	 ; строка вверх на экране - правая колонка, 3-я строка
	sui	$40
	mov	h,a	; первая экранная плоскость
;
	dcr	e
	jnz	spr_c6
;
	pop	b	; пустое чтение
;
sp_rd:	lxi	sp,0	; восстановление стека после вывода спрайта
;
	ret	; вЫход из подпрограммы вывода спрайта на экран
;
spr_ekran:
	.db	$80,$88		; адрес на экране для вывода спрайта
;
;========================================
; выводим по колонке, слева на право
;на входе
;bc адрес спрайта
;de aдрес на экране 
;E-Y D-X 
;=================================================================
spr2start:
	lxi	h,0
	dad	sp	; в hl - указатель стека
	shld	spr2rd+1	; сохраним указатель стека для восстановления
	mov	h,b
	mov	l,c
	sphl	; hl -> sp  - указатель стека на начало указанного спрайта
	xchg		; обмен hl<->de
	shld	spr_ekran	; адрес спрайта на экране
	mvi	a,3	; количество повторов вывода колонок
	sta	spr2k+1	; сохраним в алгоритм
	mov	a,l	 ; строка для вывода спрайта Y
	sta	spr2l+1	 ; сохраним Y
	mov	a,h
	adi	$20
	mov	d,a	; вторая плоскость
	adi	$20
	mov	e,a	; третья плоскость
;	mov	a,h	; первая плоскость
;
; вывод спрайта
spr2c6:
	mov	a,h	; первая плоскость
; строки 1 и 2
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 3 и 4
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 5 и 6
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 7 и 8
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 9 и 10
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 11 и 12
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 13 и 14
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 15 и 16
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 17 и 18
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 19 и 20
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 21 и 22
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
; строки 23 и 24
	inr	l	 ; строка вверх на экране
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	mov	m,b	; вывод байта на экран
	mov	h,e	 ; третья плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	inr	l	 ; строка вверх на экране
	mov	m,b	; вывод байта на экран
	mov	h,d	 ; вторая плоскость
	pop	b	; прочитать два байта спрайта
	mov	m,c	; вывод байта на экран
	mov	h,a	; первая плоскость
	mov	m,b	; вывод байта на экран
;
	inr	d
	inr	e
	inr	a
	mov	h,a
spr2l:	mvi	l,0
;
spr2k:	mvi	a,3
	dcr	a
	sta	spr2k+1
	jnz	spr2c6
;
	pop	b	; пустое чтение
;
spr2rd:	lxi	sp,0	; восстановление стека после вывода спрайта
;
	ret	; вЫход из подпрограммы вывода спрайта на экран
;
;====================================================
;===== таблица спрайтов
;
tab_spr:
	.dw	tab_spr0,tab_spr1,tab_spr2,tab_spr3
	.dw	tab_spr4,tab_spr5,tab_spr6,tab_spr7
	.dw	tab_spr8,tab_spr9,tab_spra,tab_sprb
	.dw	tab_sprc,tab_sprd,tab_spre,tab_sprf
;
	.db	0,0
tab_spr0:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr1:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$18,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$18,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$18,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$18,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$18,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$18,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr2:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr3:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$3e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr4:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr5:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fe,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr6:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fe,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr7:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$08,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$04,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$02,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$01,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr8:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spr9:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$08,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7f,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spra:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$42,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$24,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$18,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_sprb:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fe,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fe,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fe,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_sprc:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$7e,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_sprd:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fe,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$81,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fe,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_spre:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fc,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
tab_sprf:
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$fc,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$80,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$ff,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$80,$00,$01,$00,$00,$00,$ff,$ff,$ff
	.db	$7f,$ff,$fe,$00,$00,$00,$7f,$ff,$fe
	.db	0,0
;
;==========================================================
;Вывод квадратика 24x24 точки в сразу в три плоскости для статичных объектов
;стар вход HL - куда на экран выводить DE - адрес графики
;нов вход de - куда на экран выводить bc - адрес графики
SpriteC3qa:
	mov h,d
	mov l,e
	mov d,b
	mov e,c

	MOV A,h ; сохраняем начало столбик X плоскость (1) куда выводим графику
	STA pozic_xP1
	MOV A,l
	STA pozic_y; сохраняем начало строки Y куда выводим графику
	mvi a,3
	STA PLAST

	LXI B,2000h
;====================== строка 1
fumbingo:
	LDAX D ; загружаем акумулятор А содержимым графики
	MOV M,A ; выводим в экран по адресу "HL" байт графики
	INX D ; DE=DE+1 увеличиваем адрес откуда брать графику
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 2
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 3
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A 	
	INX D

	DCR L ; ==================== строка 4
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 5
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 6
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 7
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 8
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 9
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 10
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 11
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 12
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D  	
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 13
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 14
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 15
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 16
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 17
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 18
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 19
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 20
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 21
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 22
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 23
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	DCR L ; ==================== строка 24
	LDA pozic_xP1
	MOV H,A ; адрес плоскости 1
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 2
	LDAX D
	MOV M,A
	INX D
	DAD B ; адрес плоскости 3
	LDAX D
	MOV M,A
	INX D

	LDA PLAST ; счётчик столбиков (всего 3)
	dcr a
	jz rimikoq ; если все три столбика нарисованы выходим из подпрограммы
	
	STA PLAST
	; следующий столбец X
	LXI H,pozic_xP1
	inr M
	mov H,M
	LDA pozic_y
	MOV L,A ; восстанавливаем Y
	jmp fumbingo
	
rimikoq:
;=============
;
	RET ;иначе - выйти из п/п вывода квадратиков
;
PLAST:	.db	0
pozic_y:
	.db	0
pozic_xP1
	.db	0
;
;========================================================
;вывод спрайта в системе битпланов Вектор 06
;ширина спрайта -24
;на входе
;bc адрес спрайта
;de aдрес на экране 
;E-Y D-X 
drop24_2:
	lxi	h,0
	dad	sp
	shld	sprite_sp0_2+1
	mov	h,b
	mov	l,c
	mov	c,m
	inx	h
	mov	b,m
	inx	h
	sphl
	
;задаем Y в L
	mov	l,e
;задаем X в A
	mov	a,d	;битплан1
	adi	$20
	mov	e,a	;битплан2
	adi	$20	;битплан3
drop240_2:
;	dup	12
;
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
	mov	h,d
;рисуем на первом плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переходим на следующую строку
	inr	l	
;возвращаемся на первый план	
	mov	h,d
;повторяем цикл рисования
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
	pop	b
;переход на второй битплан
	mov	h,e
;рисуем на втором плане
	mov	m,c
	inr	h
	mov	m,b
	inr	h
	pop	b
	mov	m,c
;переход на третий битплан
	mov	h,a
;рисуем на третьем плане
	mov	m,b
	inr	h
	pop	b
	mov	m,c
	inr	h
	mov	m,b
;выбираем следующую пару байтов для цикла рисования
	inr	l	
	pop	b
;	
sprite_sp0_2:
	lxi	sp,$3131
	ret
;====================================================

	.end
